#练习1.3
(define (e13 a b c)
  (cond ((and (< a b ) (< a c)) (+(square b)(square c)))
        ((and (< b a) (< b c)) (+(square a)(square c)))
        (else (+(square a)(square c)))))
(define (square x)
  (* x x))
  
  
#练习1.11





#练习1.12

(define (f x y)
  (if (or(= y 1 ) (= y x )) 1 
          (+(f (- x 1) (- y 1)) (f(- x 1) y))))
          #调试了很久 ，真正懂得了写代码和看代码是不一样的
   
     
#练习 1.37
(define (cont-frac N D k)

    (define (cf i)
        (if (= k i)
            (/ (N k) (D k))
            (/ (N i)
               (+ (D i) (cf (+ i 1))))))

    (cf 1)
#迭代
(define (cont-frac n d k)
  (define (iter i answer)
    (if (= i 0)
        answer
        (iter (- i 1) (/(n i) (+(d i) answer)))))
    ( iter (- k 1) (/ (n k) ( d k))))
    #注意ite 中的k初始值，记住这一类型
#练习1.41
(define (double f)
  (lambda (x) ( f (f x))))
#练习1.42
(define (compose f g)
  (lambda (x) (f (g x))))
3练习1.43
(define (repeated f n)
  (if (< n 2)
      f
      (compose f (repeated f (- n 1)))))
(define (compose f g)
  (lambda (x) (f (g x))))
(define (square x)
  (* x x))
                       
 #练习1.44
 (define (repeated f n)
  (if (< n 2)
      f
      (compose f (repeated f (- n 1)))))
(define (compose f g)
  (lambda (x) (f (g x))))
(define (square x)
  (* x x))
(define dx 0.00001)
(define (smooth f )
  (lambda (x) (average ( (f (- x dx)) (f x) (f (+ x dx)))) ))
(define (average x y z)
  (/ 1 ( * 3 x y z)))
(define (n-smooth f n)
  (repeated (smooth f) n))
